// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique
  password   String
  projects   Project[]    @relation("OwnedProjects") // Projects yang dia buat
  memberships Membership[]
  tasks      Task[]       @relation("TaskAssignee")

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Project {
  id          String       @id @default(uuid())
  name        String
  ownerId     String
  owner       User         @relation("OwnedProjects", fields: [ownerId], references: [id])
  memberships Membership[]
  tasks       Task[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Membership {
  id        String   @id @default(uuid())
  userId    String
  projectId String

  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // agar 1 user tidak jadi member berkali-kali
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String
  projectId   String
  assigneeId  String?

  project     Project  @relation(fields: [projectId], references: [id])
  assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
